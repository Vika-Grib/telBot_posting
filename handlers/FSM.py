from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Dispatcher, types
from createBot import bot, dp
from aiogram.dispatcher.filters import Text
from keyboards import kb

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from createBot import chanal

ikb1 = InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', callback_data='da')
ikb2 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='no')
inkb = InlineKeyboardMarkup(row_width=1).add(ikb1).add(ikb2)


class FSMadmin(StatesGroup):
    photo = State()
    name = State()
    description = State()


# @dp.message_handler(commands='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None)
async def cm_start(message: types.Message):
    await FSMadmin.photo.set()
    await message.answer('–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º!\n–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ')
    await message.delete()


# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('OK, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É')


imag = 1


@dp.message_handler(lambda message: not message.photo, state=FSMadmin.photo)
async def check_photo(message: types.Message, state: FSMContext):
    if message.text.lower() == '–±–µ–∑':
        async with state.proxy() as data:
            data['photo'] = None
        global imag
        imag = 2
        await FSMadmin.next()
        await message.answer('–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫')
    elif message.text == '/–æ—Ç–º–µ–Ω–∞':
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.answer('OK, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É')
    else:
        await message.answer('–ü—Ä–∏—à–ª–∏ –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ª–∏–±–æ "–±–µ–∑"')


# @dp.message_handler(content_types=['photo'], state=FSMadmin.photo)
# @dp.message_handler(lambda message: message.photo, state=FSMadmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await FSMadmin.next()
    await message.reply(f'–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫')


# @dp.message_handler(content_types=['text'], state=FSMadmin.name)
async def load_name(message: types.Message, state: FSMContext):
    if len(message.text) <= 70:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMadmin.next()
        await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ')
    else:
        await message.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤. –î—É–º–∞—é —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫üòù')


# @dp.message_handler(content_types=['text'], state=FSMadmin.description)
async def load_description(message: types.Message, state: FSMContext):
    if imag == 2:
        if len(message.text) <= 4000:
            async with state.proxy() as data:
                data['description'] = message.text
            await bot.send_message(message.chat.id,
                                   f"<b><i><u>{data['name']}</u></i></b>\n"
                                   f"{data['description']}", parse_mode='html', reply_markup=inkb)
        else:
            await message.answer(f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞ {len(message.text) - 4000} üòÖ)')
    else:
        if len(message.text) <= 950:
            async with state.proxy() as data:
                data['description'] = message.text
            await bot.send_photo(chat_id=message.chat.id,
                                 photo=data['photo'],
                                 caption=f"<b><i><u>{data['name']}</u></i></b>\n"
                                         f"{data['description']}", parse_mode='html', reply_markup=inkb)
        else:
            await message.answer(f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞ {len(message.text) - 1023} üòÖ)')
    global a
    a = data['photo']
    global b
    b = f"<b><i><u>{data['name']}</u></i></b>\n{data['description']}"
    global chat_id
    chat_id = message.chat.id
    await state.finish()


@dp.callback_query_handler(text='da')
async def da_call(callback: types.CallbackQuery):
    if imag == 2:
        await callback.bot.send_message(chanal, b, parse_mode='html')
    else:
        await callback.bot.send_photo(chat_id=chanal, photo=a, caption=b, parse_mode='html')
    await bot.send_message(chat_id, '<i>–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ!</i>', parse_mode='html')


@dp.callback_query_handler(text='no')
async def net_call(callback: types.CallbackQuery):
    await callback.bot.send_message(chat_id, '<i>–ù–∞—á–Ω–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ!</i>', parse_mode='html')


def register_hadnlers_FSM(dp: Dispatcher):
    dp.register_message_handler(cm_start, commands=['–ó–∞–≥—Ä—É–∑–∏—Ç—å'], state=None)
    dp.register_message_handler(cancel_handler, state='*', commands=['–æ—Ç–º–µ–Ω–∞'])
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMadmin.photo)
    dp.register_message_handler(load_name, state=FSMadmin.name)
    dp.register_message_handler(load_description, state=FSMadmin.description)
